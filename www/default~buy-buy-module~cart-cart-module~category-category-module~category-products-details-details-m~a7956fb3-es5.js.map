{"version":3,"sources":["webpack:///src/app/home/service/shop.service.ts"],"names":["ShopService","http","nativeHttp","authService","platform","url","type","data","JSON","stringify","post","pipe","res","catid","productid","option","price","quantity","action","sid","currentUserDataValue","code","paytype","shiptypeid","addressid","optionid","amount","refcode","tcode","providedIn"],"mappings":"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","file":"default~buy-buy-module~cart-cart-module~category-category-module~category-products-details-details-m~a7956fb3-es5.js","sourcesContent":["import { Platform } from '@ionic/angular';\nimport { from } from 'rxjs';\nimport { AuthServiceService } from './../../authenticate/service/auth-service.service';\nimport { environment } from './../../../environments/environment';\nimport { ResponseType } from './../../../interfaces/response';\nimport { Observable } from 'rxjs';\nimport { HTTP } from '@ionic-native/http/ngx';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopService {\n\n  constructor(\n    private http: HttpClient, private nativeHttp: HTTP,\n    private authService: AuthServiceService, private platform: Platform\n  ) {\n\n  }\n\n  GetCategories(): Observable<ResponseType> {\n    const url = environment.url + 'MProductServlet';\n    const type = 'GetRootCategories';\n    // if (this.platform.is(\"android\")) {\n    // const data = {\n    //   type\n    // };\n    //   this.nativeHttp.setDataSerializer(\"json\");\n    //   let nativeCall = this.nativeHttp.get(url, data, { \"Content-Type\": \"application/json\" });\n    //   return from(nativeCall).pipe(\n    //     map(result => {\n    // if(result.code === 200){\n    //       return JSON.parse(result.data);\n    //     })\n    //   )\n    // } else {\n    const data = JSON.stringify({ type });\n    return this.http.post<ResponseType>(url, data).pipe(\n      map(res => {\n        return res;\n      })\n    );\n    // }\n  }\n  GetTopSellingProducts(): Observable<ResponseType> {\n    const url = environment.url + 'MProductServlet';\n    const type = 'GetTopSellingProducts';\n    // if (this.platform.is('android')) {\n    //   const data = {\n    //     type\n    //   };\n    //   this.nativeHttp.setDataSerializer(\"json\");\n    //   let nativeCall = this.nativeHttp.get(url, data, { \"Content-Type\": \"application/json\" });\n    //   return from(nativeCall).pipe(\n    //     map(result => {\n    //       return JSON.parse(result.data);\n    //     })\n    //   )\n    // } else {\n    const data = JSON.stringify({ type });\n    return this.http.post<ResponseType>(url, data).pipe(\n      map(res => {\n        return res;\n      })\n    );\n    //}\n  }\n  GetRecentlyAddedProducts(): Observable<ResponseType> {\n    const url = environment.url + 'MProductServlet';\n    const type = 'GetRecentlyAddedProducts';\n    // if (this.platform.is(\"android\")) {\n    // const data = {\n    //   type\n    // };\n    //   this.nativeHttp.setDataSerializer(\"json\");\n    //   let nativeCall = this.nativeHttp.get(url, data, { \"Content-Type\": \"application/json\" });\n    //   return from(nativeCall).pipe(\n    //     map(result => {\n    // if(result.code === 200){\n    //       return JSON.parse(result.data);\n    //     })\n    //   )\n    // } else {\n    const data = JSON.stringify({ type });\n    return this.http.post<ResponseType>(url, data).pipe(\n      map(res => {\n        return res;\n      })\n    );\n    // }\n  }\n  GetFeaturedProducts(): Observable<ResponseType> {\n    const url = environment.url + 'MProductServlet';\n    const type = 'GetFeaturedProducts';\n    // if (this.platform.is(\"android\")) {\n    // const data = {\n    //   type\n    // };\n    //   this.nativeHttp.setDataSerializer(\"json\");\n    //   let nativeCall = this.nativeHttp.get(url, data, { \"Content-Type\": \"application/json\" });\n    //   return from(nativeCall).pipe(\n    //     map(result => {\n    // if(result.code === 200){\n    //       return JSON.parse(result.data);\n    //     })\n    //   )\n    // } else {\n    const data = JSON.stringify({ type });\n    return this.http.post<ResponseType>(url, data).pipe(\n      map(res => {\n        return res;\n      })\n    );\n    // }\n  }\n  GetBestSellersProducts(): Observable<ResponseType> {\n    const url = environment.url + 'MProductServlet';\n    const type = 'GetBestSellersProducts';\n    // if (this.platform.is(\"android\")) {\n    // const data = {\n    //   type\n    // };\n    //   this.nativeHttp.setDataSerializer(\"json\");\n    //   let nativeCall = this.nativeHttp.get(url, data, { \"Content-Type\": \"application/json\" });\n    //   return from(nativeCall).pipe(\n    //     map(result => {\n    // if(result.code === 200){\n    //       return JSON.parse(result.data);\n    //     })\n    //   )\n    // } else {\n    const data = JSON.stringify({ type });\n    return this.http.post<ResponseType>(url, data).pipe(\n      map(res => {\n        return res;\n      })\n    );\n    // }\n  }\n  GetCategoryProducts(catid): Observable<ResponseType> {\n    const url = environment.url + 'MProductServlet';\n    const type = 'GetShopProductsByCategoryID';\n    // if (this.platform.is(\"android\")) {\n    // const data = {\n    //   type,\n    // catid\n    // };\n    //   this.nativeHttp.setDataSerializer(\"json\");\n    //   let nativeCall = this.nativeHttp.get(url, data, { \"Content-Type\": \"application/json\" });\n    //   return from(nativeCall).pipe(\n    //     map(result => {\n    // if(result.code === 200){\n    //       return JSON.parse(result.data);\n    //     })\n    //   )\n    // } else {\n    const data = JSON.stringify({ type, catid });\n    return this.http.post<ResponseType>(url, data).pipe(\n      map(res => {\n        return res;\n      })\n    );\n    // }\n  }\n  GetRelatedProducts(productid): Observable<ResponseType> {\n    const url = environment.url + 'MProductServlet';\n    const type = 'GetRelatedProducts';\n    // if (this.platform.is(\"android\")) {\n    // const data = {\n    //   type,\n    // productid\n    // };\n    //   this.nativeHttp.setDataSerializer(\"json\");\n    //   let nativeCall = this.nativeHttp.get(url, data, { \"Content-Type\": \"application/json\" });\n    //   return from(nativeCall).pipe(\n    //     map(result => {\n    // if(result.code === 200){\n    //       return JSON.parse(result.data);\n    //     })\n    //   )\n    // } else {\n    const data = JSON.stringify({ type, productid });\n    return this.http.post<ResponseType>(url, data).pipe(\n      map(res => {\n        return res;\n      })\n    );\n    // }\n  }\n\n\n\n  AddOption(option, productid, price, quantity, action): Observable<ResponseType> {\n    const url = environment.url + 'MProductServlet';\n    const type = 'AddOption';\n    const sid = this.authService.currentUserDataValue.sid;\n    // if (this.platform.is(\"android\")) {\n    // const data = {\n    //   type,\n    // productid\n    // };\n    //   this.nativeHttp.setDataSerializer(\"json\");\n    //   let nativeCall = this.nativeHttp.get(url, data, { \"Content-Type\": \"application/json\" });\n    //   return from(nativeCall).pipe(\n    //     map(result => {\n    // if(result.code === 200){\n    //       return JSON.parse(result.data);\n    //     })\n    //   )\n    // } else {\n    const data = JSON.stringify({ type, sid, option, productid, price, quantity, action });\n    return this.http.post<ResponseType>(url, data).pipe(\n      map(res => {\n        return res;\n      })\n    );\n    // }\n  }\n  CartDiscountCode(code): Observable<ResponseType> {\n    const url = environment.url + 'MProductServlet';\n    const type = 'CartDiscountCode';\n    const sid = this.authService.currentUserDataValue.sid;\n    // if (this.platform.is(\"android\")) {\n    // const data = {\n    //   type,\n    // code\n    //sid\n    // };\n    //   this.nativeHttp.setDataSerializer(\"json\");\n    //   let nativeCall = this.nativeHttp.get(url, data, { \"Content-Type\": \"application/json\" });\n    //   return from(nativeCall).pipe(\n    //     map(result => {\n    // if(result.code === 200){\n    //       return JSON.parse(result.data);\n    //     })\n    //   )\n    // } else {\n    const data = JSON.stringify({ type, sid, code });\n    return this.http.post<ResponseType>(url, data).pipe(\n      map(res => {\n        return res;\n      })\n    );\n    // }\n  }\n  GetCartDefaultAddress(sid): Observable<ResponseType> {\n    const url = environment.url + 'MProductServlet';\n    const type = 'GetCartDefaultAddress';\n    // if (this.platform.is(\"android\")) {\n    // const data = {\n    //   type,\n    // code\n    //sid\n    // };\n    //   this.nativeHttp.setDataSerializer(\"json\");\n    //   let nativeCall = this.nativeHttp.get(url, data, { \"Content-Type\": \"application/json\" });\n    //   return from(nativeCall).pipe(\n    //     map(result => {\n    // if(result.code === 200){\n    //       return JSON.parse(result.data);\n    //     })\n    //   )\n    // } else {\n    const data = JSON.stringify({ type, sid });\n    return this.http.post<ResponseType>(url, data).pipe(\n      map(res => {\n        return res;\n      })\n    );\n    // }\n  }\n  processOrder(sid, paytype, shiptypeid, addressid): Observable<ResponseType> {\n    const url = environment.url + 'MProductServlet';\n    const type = 'PlaceOrder';\n    // if (this.platform.is(\"android\")) {\n    // const data = {\n    //   type,\n    // code\n    //sid\n    // };\n    //   this.nativeHttp.setDataSerializer(\"json\");\n    //   let nativeCall = this.nativeHttp.get(url, data, { \"Content-Type\": \"application/json\" });\n    //   return from(nativeCall).pipe(\n    //     map(result => {\n    // if(result.code === 200){\n    //       return JSON.parse(result.data);\n    //     })\n    //   )\n    // } else {\n    const data = JSON.stringify({ type, sid, paytype, shiptypeid, addressid });\n    return this.http.post<ResponseType>(url, data).pipe(\n      map(res => {\n        return res;\n      })\n    );\n    // }\n  }\n  getParameter(): Observable<ResponseType> {\n    const url = environment.url + 'MProductServlet';\n    const type = 'GetPaystackKey';\n    // if (this.platform.is(\"android\")) {\n    // const data = {\n    //   type,\n    // code\n    //sid\n    // };\n    //   this.nativeHttp.setDataSerializer(\"json\");\n    //   let nativeCall = this.nativeHttp.get(url, data, { \"Content-Type\": \"application/json\" });\n    //   return from(nativeCall).pipe(\n    //     map(result => {\n    // if(result.code === 200){\n    //       return JSON.parse(result.data);\n    //     })\n    //   )\n    // } else {\n    const data = JSON.stringify({ type });\n    return this.http.post<ResponseType>(url, data).pipe(\n      map(res => {\n        return res;\n      })\n    );\n    // }\n  }\n\n  UpdateOption(option, productid, price, quantity, action): Observable<ResponseType> {\n    const url = environment.url + 'MProductServlet';\n    const type = 'UpdateOptions';\n    const sid = this.authService.currentUserDataValue.sid;\n    // if (this.platform.is(\"android\")) {\n    // const data = {\n    //   type,\n    // productid\n    // };\n    //   this.nativeHttp.setDataSerializer(\"json\");\n    //   let nativeCall = this.nativeHttp.get(url, data, { \"Content-Type\": \"application/json\" });\n    //   return from(nativeCall).pipe(\n    //     map(result => {\n    // if(result.code === 200){\n    //       return JSON.parse(result.data);\n    //     })\n    //   )\n    // } else {\n    const data = JSON.stringify({ type, sid, option, productid, price, quantity, action });\n    return this.http.post<ResponseType>(url, data).pipe(\n      map(res => {\n        return res;\n      })\n    );\n    // }\n  }\n  DeleteOption(option, optionid, productid): Observable<ResponseType> {\n    const url = environment.url + 'MProductServlet';\n    const type = 'DeleteOptions';\n    // if (this.platform.is(\"android\")) {\n    // const data = {\n    //   type,\n    // optionid, productid\n    // };\n    //   this.nativeHttp.setDataSerializer(\"json\");\n    //   let nativeCall = this.nativeHttp.get(url, data, { \"Content-Type\": \"application/json\" });\n    //   return from(nativeCall).pipe(\n    //     map(result => {\n    // if(result.code === 200){\n    //       return JSON.parse(result.data);\n    //     })\n    //   )\n    // } else {\n    const data = JSON.stringify({ type, option, optionid, productid });\n    return this.http.post<ResponseType>(url, data).pipe(\n      map(res => {\n        return res;\n      })\n    );\n    // }\n  }\n\n  GetUserCart(sid): Observable<ResponseType> {\n    const url = environment.url + 'MProductServlet';\n    const type = 'GetShopCart';\n    // if (this.platform.is(\"android\")) {\n    // const data = {\n    //   type,\n    // sid\n    // };\n    //   this.nativeHttp.setDataSerializer(\"json\");\n    //   let nativeCall = this.nativeHttp.get(url, data, { \"Content-Type\": \"application/json\" });\n    //   return from(nativeCall).pipe(\n    //     map(result => {\n    // if(result.code === 200){\n    //       return JSON.parse(result.data);\n    //     })\n    //   )\n    // } else {\n    const data = JSON.stringify({ type, sid });\n    return this.http.post<ResponseType>(url, data).pipe(\n      map(res => {\n        return res;\n      })\n    );\n    // }\n  }\n\n  placeOrder(sid, paytype, shiptypeid, addressid, amount, refcode, tcode): Observable<ResponseType> {\n    const url = environment.url + 'MProductServlet';\n    const type = 'ValidatePaystackPayment';\n    // if (this.platform.is(\"android\")) {\n    // const data = {\n    //   type,\n    // code\n    //sid\n    // };\n    //   this.nativeHttp.setDataSerializer(\"json\");\n    //   let nativeCall = this.nativeHttp.get(url, data, { \"Content-Type\": \"application/json\" });\n    //   return from(nativeCall).pipe(\n    //     map(result => {\n    // if(result.code === 200){\n    //       return JSON.parse(result.data);\n    //     })\n    //   )\n    // } else {\n    const data = JSON.stringify({ type, sid, paytype, shiptypeid, addressid, amount, refcode, tcode });\n    return this.http.post<ResponseType>(url, data).pipe(\n      map(res => {\n        return res;\n      })\n    );\n    // }\n  }\n}\n"]}